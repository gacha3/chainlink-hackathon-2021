/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CryptoPunksInterfaceInterface extends utils.Interface {
  functions: {
    "buyPunk(uint256)": FunctionFragment;
    "offerPunkForSaleToAddress(uint256,uint256,address)": FunctionFragment;
    "punkIndexToAddress(uint256)": FunctionFragment;
    "punksOfferedForSale(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyPunk",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offerPunkForSaleToAddress",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "punkIndexToAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "punksOfferedForSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "buyPunk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offerPunkForSaleToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "punkIndexToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "punksOfferedForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CryptoPunksInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CryptoPunksInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyPunk(
      punkIndex: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    offerPunkForSaleToAddress(
      punkIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    punkIndexToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    punksOfferedForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber, string] & {
        isForSale: boolean;
        punkIndex: BigNumber;
        seller: string;
        minValue: BigNumber;
        onlySellTo: string;
      }
    >;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  buyPunk(
    punkIndex: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  offerPunkForSaleToAddress(
    punkIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    toAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  punkIndexToAddress(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  punksOfferedForSale(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, string, BigNumber, string] & {
      isForSale: boolean;
      punkIndex: BigNumber;
      seller: string;
      minValue: BigNumber;
      onlySellTo: string;
    }
  >;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    buyPunk(punkIndex: BigNumberish, overrides?: CallOverrides): Promise<void>;

    offerPunkForSaleToAddress(
      punkIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    punkIndexToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    punksOfferedForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber, string] & {
        isForSale: boolean;
        punkIndex: BigNumber;
        seller: string;
        minValue: BigNumber;
        onlySellTo: string;
      }
    >;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    buyPunk(
      punkIndex: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    offerPunkForSaleToAddress(
      punkIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    punkIndexToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    punksOfferedForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    buyPunk(
      punkIndex: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    offerPunkForSaleToAddress(
      punkIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    punkIndexToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    punksOfferedForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
