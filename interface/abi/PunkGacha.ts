/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PunkGachaInterface extends utils.Interface {
  functions: {
    "bet()": FunctionFragment;
    "checkUpkeep(bytes)": FunctionFragment;
    "chips(uint256)": FunctionFragment;
    "chipsCount()": FunctionFragment;
    "currentRound()": FunctionFragment;
    "destory()": FunctionFragment;
    "isPaused()": FunctionFragment;
    "maximumPunkValue()": FunctionFragment;
    "minimumBetValue()": FunctionFragment;
    "nextRound(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
    "rawFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "refund(uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "segments(uint256)": FunctionFragment;
    "segmentsCount()": FunctionFragment;
    "serviceFeeThousandth()": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setIsPaused(bool)": FunctionFragment;
    "setKeyHash(bytes32)": FunctionFragment;
    "setMaximumPunkValue(uint256)": FunctionFragment;
    "setMinimumBetValue(uint256)": FunctionFragment;
    "setServiceFeeThousandth(uint256)": FunctionFragment;
    "totalAmount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawLink()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "chips", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "chipsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "destory", values?: undefined): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maximumPunkValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumBetValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "segments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "segmentsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "serviceFeeThousandth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeyHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaximumPunkValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumBetValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setServiceFeeThousandth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawLink",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "bet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chips", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chipsCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "destory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maximumPunkValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumBetValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "segments", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "segmentsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serviceFeeThousandth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeyHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaximumPunkValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumBetValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setServiceFeeThousandth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLink",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PlayerBet(uint200,address,uint96)": EventFragment;
    "PlayerRefund(uint200,address,uint96)": EventFragment;
    "RoundClose(uint200,address,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerBet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerRefund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundClose"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PlayerBetEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { roundId: BigNumber; player: string; amount: BigNumber }
>;

export type PlayerBetEventFilter = TypedEventFilter<PlayerBetEvent>;

export type PlayerRefundEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { roundId: BigNumber; player: string; amount: BigNumber }
>;

export type PlayerRefundEventFilter = TypedEventFilter<PlayerRefundEvent>;

export type RoundCloseEvent = TypedEvent<
  [BigNumber, string, number],
  { roundId: BigNumber; winner: string; punkIndex: number }
>;

export type RoundCloseEventFilter = TypedEventFilter<RoundCloseEvent>;

export interface PunkGacha extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PunkGachaInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bet(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkUpkeep(
      checkData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    chips(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { player: string; amount: BigNumber }>;

    chipsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentRound(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        minValue: BigNumber;
        id: BigNumber;
        punkIndex: number;
        status: number;
      }
    >;

    destory(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    maximumPunkValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumBetValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextRound(
      _punkIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    performUpkeep(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refund(
      chipIndexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    segments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    segmentsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    serviceFeeThousandth(overrides?: CallOverrides): Promise<[BigNumber]>;

    setFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsPaused(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeyHash(
      keyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaximumPunkValue(
      _maximumPunkValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumBetValue(
      _minimumBetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setServiceFeeThousandth(
      _serviceFeeThousandth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bet(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkUpkeep(
    checkData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string] & { upkeepNeeded: boolean; performData: string }
  >;

  chips(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { player: string; amount: BigNumber }>;

  chipsCount(overrides?: CallOverrides): Promise<BigNumber>;

  currentRound(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, number] & {
      minValue: BigNumber;
      id: BigNumber;
      punkIndex: number;
      status: number;
    }
  >;

  destory(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  maximumPunkValue(overrides?: CallOverrides): Promise<BigNumber>;

  minimumBetValue(overrides?: CallOverrides): Promise<BigNumber>;

  nextRound(
    _punkIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  performUpkeep(
    arg0: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rawFulfillRandomness(
    requestId: BytesLike,
    randomness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refund(
    chipIndexes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  segments(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  segmentsCount(overrides?: CallOverrides): Promise<BigNumber>;

  serviceFeeThousandth(overrides?: CallOverrides): Promise<BigNumber>;

  setFee(
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsPaused(
    _isPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeyHash(
    keyHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaximumPunkValue(
    _maximumPunkValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumBetValue(
    _minimumBetValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setServiceFeeThousandth(
    _serviceFeeThousandth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLink(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bet(overrides?: CallOverrides): Promise<void>;

    checkUpkeep(
      checkData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    chips(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { player: string; amount: BigNumber }>;

    chipsCount(overrides?: CallOverrides): Promise<BigNumber>;

    currentRound(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        minValue: BigNumber;
        id: BigNumber;
        punkIndex: number;
        status: number;
      }
    >;

    destory(overrides?: CallOverrides): Promise<void>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    maximumPunkValue(overrides?: CallOverrides): Promise<BigNumber>;

    minimumBetValue(overrides?: CallOverrides): Promise<BigNumber>;

    nextRound(
      _punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    performUpkeep(arg0: BytesLike, overrides?: CallOverrides): Promise<void>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    refund(
      chipIndexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    segments(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    segmentsCount(overrides?: CallOverrides): Promise<BigNumber>;

    serviceFeeThousandth(overrides?: CallOverrides): Promise<BigNumber>;

    setFee(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setIsPaused(_isPaused: boolean, overrides?: CallOverrides): Promise<void>;

    setKeyHash(keyHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    setMaximumPunkValue(
      _maximumPunkValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumBetValue(
      _minimumBetValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setServiceFeeThousandth(
      _serviceFeeThousandth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawLink(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PlayerBet(uint200,address,uint96)"(
      roundId?: BigNumberish | null,
      player?: string | null,
      amount?: null
    ): PlayerBetEventFilter;
    PlayerBet(
      roundId?: BigNumberish | null,
      player?: string | null,
      amount?: null
    ): PlayerBetEventFilter;

    "PlayerRefund(uint200,address,uint96)"(
      roundId?: BigNumberish | null,
      player?: string | null,
      amount?: null
    ): PlayerRefundEventFilter;
    PlayerRefund(
      roundId?: BigNumberish | null,
      player?: string | null,
      amount?: null
    ): PlayerRefundEventFilter;

    "RoundClose(uint200,address,uint16)"(
      roundId?: BigNumberish | null,
      winner?: string | null,
      punkIndex?: null
    ): RoundCloseEventFilter;
    RoundClose(
      roundId?: BigNumberish | null,
      winner?: string | null,
      punkIndex?: null
    ): RoundCloseEventFilter;
  };

  estimateGas: {
    bet(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkUpkeep(
      checkData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chips(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    chipsCount(overrides?: CallOverrides): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    destory(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    maximumPunkValue(overrides?: CallOverrides): Promise<BigNumber>;

    minimumBetValue(overrides?: CallOverrides): Promise<BigNumber>;

    nextRound(
      _punkIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    performUpkeep(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refund(
      chipIndexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    segments(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    segmentsCount(overrides?: CallOverrides): Promise<BigNumber>;

    serviceFeeThousandth(overrides?: CallOverrides): Promise<BigNumber>;

    setFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsPaused(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeyHash(
      keyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaximumPunkValue(
      _maximumPunkValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumBetValue(
      _minimumBetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setServiceFeeThousandth(
      _serviceFeeThousandth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bet(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkUpkeep(
      checkData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chips(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chipsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    destory(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maximumPunkValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumBetValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextRound(
      _punkIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performUpkeep(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      chipIndexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    segments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    segmentsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    serviceFeeThousandth(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsPaused(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeyHash(
      keyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaximumPunkValue(
      _maximumPunkValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumBetValue(
      _minimumBetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setServiceFeeThousandth(
      _serviceFeeThousandth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
