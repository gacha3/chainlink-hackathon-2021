/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { GachaUtil, GachaUtilInterface } from "../GachaUtil";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_cryptopunks",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060405160c838038060c8833981016040819052602a91604e565b600080546001600160a01b0319166001600160a01b0392909216919091179055607c565b600060208284031215605f57600080fd5b81516001600160a01b0381168114607557600080fd5b9392505050565b603f8060896000396000f3fe6080604052600080fdfea26469706673582212200322a8da6ddfb57803a2e5ca4319f390c511b6c0eaaeb2e22729eb7ce7cb726e64736f6c63430008090033";

type GachaUtilConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GachaUtilConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GachaUtil__factory extends ContractFactory {
  constructor(...args: GachaUtilConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _cryptopunks: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GachaUtil> {
    return super.deploy(_cryptopunks, overrides || {}) as Promise<GachaUtil>;
  }
  getDeployTransaction(
    _cryptopunks: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_cryptopunks, overrides || {});
  }
  attach(address: string): GachaUtil {
    return super.attach(address) as GachaUtil;
  }
  connect(signer: Signer): GachaUtil__factory {
    return super.connect(signer) as GachaUtil__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GachaUtilInterface {
    return new utils.Interface(_abi) as GachaUtilInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GachaUtil {
    return new Contract(address, _abi, signerOrProvider) as GachaUtil;
  }
}
